
parameters:
  - name: environment
    type: string 
    default: ''
  - name: buildConfiguration
    type: string
    default: 'Release'
  - name: testProjects
    type: string
    default: '**Tests/**.csproj'
  - name: azureSubscription
    type: string
    default: ''
  - name: appType
    type: string
    default: 'webAppLinux'
  - name: webAppName
    type: string
    default: ''
  - name: projectKey
    type: string
  - name: projectToken
    type: string
  - name: connection
    type: string

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-16.04'

    steps:
    - task: UseDotNet@2
      inputs:
        version: '2.0.0'
        
    - task: UseDotnet@2
      inputs:
        version: '3.1.x'

    - script: dotnet tool install --global dotnet-sonarscanner
      displayName: install sonarScanner

    - script: dotnet sonarscanner begin -k:"${{ parameters.projectKey }}" -d:sonar.login="${{ parameters.projectToken }}" -d:sonar.host.url="${{ parameters.connection }}"
      displayName: Code analysis prepare

    - script: dotnet build --configuration ${{ parameters.buildConfiguration }}
      displayName: Build

    - script: dotnet sonarscanner end -d:sonar.login="${{ parameters.projectToken }}"
      displayName: End code analysis 

  
- stage: Test
  jobs:
  - job: Test
    pool:
      vmImage: 'ubuntu-16.04'

    steps:
    - task: DotNetCoreCLI@2
      displayName: Run Tests
      inputs:
        command: test
        projects: ${{ parameters.testProjects }}
        arguments: '--configuration ${{ parameters.buildConfiguration }} --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true'
        nobuild: true
  
    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . dotnet-reportgenerator-globaltool
      displayName: Install ReportGenerator tool
    
    - script: ./reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage/ -reporttypes:"Cobertura"
      displayName: Create Code coverage report
      
    - task: PublishCodeCoverageResults@1
      displayName: Publish code coverage
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
        pathToSources: '$(Build.SourcesDirectory)'

  - job: Publish
    dependsOn: Test
    pool:
      vmImage: 'ubuntu-16.04'

    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        arguments: '--configuration ${{ parameters.buildConfiguration}} --output $(Build.ArtifactStagingDirectory)'
        modifyOutputPath: true
        zipAfterPublish: true
        
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '$(System.TeamProject)_$(Build.Repository.Name)_$(Build.SourceBranchName)'

- stage: Deploy
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          pool: 
            vmImage: 'ubuntu-16.04'

          steps:
          - task: AzureRMWebAppDeployment@4
            inputs:
              azureSubscription: ${{ parameters.azureSubscription }}
              appType: ${{ parameters.appType }}
              WebAppName: ${{ parameters.webAppName }}
              packageForLinux: '$(Agent.BuildDirectory)/$(System.TeamProject)_$(Build.Repository.Name)_$(Build.SourceBranchName)/**.zip'
